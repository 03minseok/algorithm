그래프 탐색
1. DFS : 깊이 우선 탐색(depth-first-search)
- 루트 노드(혹은 임의의 노드)에서 시작해서 다음 분기로 넘어가기 전에 해당 분기를 완벽하게 탐색하는 방법.
- 즉, 넓게 탐색하기 전에 깊게 탐색한다는 뜻.
- 스택, 재귀 이용해서 구현

2. BFS : 너비 우선 탐색(breadth-first-search)
- 루트 노드(혹은 임의의 노드)에서 시작해서 인접한 노드를 먼저 탐색하는 방법.
- 즉, 깊게 탐색하기 전에 넓게 탐색하다는 뜻.
- 최단 경로 혹으 임의의 경로를 찾고 싶을 때 일반적으로 더 낫다.
- 큐 이용해서 구현

백준 DFS와 BFS
https://www.acmicpc.net/problem/1260

#include <stdio.h>
#include <vector>
#include <queue>
#include <algorithm>
using namespace std;

struct node {
	int v; //정점
	int w; //거리
};

const int MN = 10000+5;
vector<int> graph[MN];
queue<int> Q;
int visit[MN];

void dfs(int start) {
	if (visit[start]) {
		return;
	}
	visit[start] = true;
	printf("%d ", start);

	for (int i = 0; i < graph[start].size(); i++) {
		int x = graph[start][i];
		dfs(x);
	}
}

void bfs(int start) {
	Q.push(start);
	visit[start] = true;
	while (!Q.empty()) {
		int x = Q.front();
		Q.pop();
		printf("%d ", x);
		for (int i = 0; i < graph[x].size(); i++) {
			int a = graph[x][i];
			if (!visit[a]) {
				Q.push(a);
				visit[a] = true;
			}
		}
	}
}

int main() {
	int n, m, i, j, s;
	//printf("정점, 간선 입력 : ");
	scanf("%d %d %d", &n, &m, &s); //n 정점 m 간선
	for (i = 0; i < m; i++) {
		int a, b, c;
		scanf("%d %d", &a, &b);
		graph[a].push_back(b);
		graph[b].push_back(a);
	}
	for(i=0;i<n;i++)
		sort(graph[i].begin(), graph[i].end());
	dfs(s);
	printf("\n");
	for (i = 0; i < MN; i++) visit[i] = 0;
	bfs(s);
	return 0;
}
​

